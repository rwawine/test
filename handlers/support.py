"""
Support handlers for the Telegram bot
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from models import SupportStates
from keyboards import *
from database import DatabaseManager

logger = logging.getLogger(__name__)

def create_support_router(db_manager: DatabaseManager) -> Router:
    """Create support system router"""
    router = Router()
    
    @router.message(F.text == "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    async def support_menu(message: Message, state: FSMContext):
        """Show support menu"""
        await state.clear()
        
        await message.answer(
            "üí¨ –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n\n"
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "üìû –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π",
            reply_markup=get_support_menu_keyboard()
        )
    
    @router.message(F.text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    async def show_faq(message: Message):
        """Show FAQ menu"""
        await message.answer(
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
            reply_markup=get_faq_keyboard()
        )
    
    @router.callback_query(F.data == "faq_registration")
    async def faq_registration(callback: CallbackQuery):
        """FAQ: Registration process"""
        faq_text = (
            "üìã –ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ?\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'\n"
            "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\n"
            "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
            "5Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ª–∏—Ñ–ª–µ—Ç–∞\n"
            "6Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            "‚è±Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.\n"
            "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )
        
        await callback.message.edit_text(faq_text)
    
    @router.callback_query(F.data == "faq_results")
    async def faq_results(callback: CallbackQuery):
        """FAQ: Results timing"""
        faq_text = (
            "üïê –ö–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞?\n\n"
            "üìÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Å—Ç–æ–∏—Ç—Å—è: 5 –Ω–æ—è–±—Ä—è 2024\n"
            "üïê –í—Ä–µ–º—è: 15:00 –ú–°–ö\n"
            "üì∫ –ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ\n\n"
            "üì¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã:\n"
            "‚Ä¢ –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
            "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n\n"
            "üèÜ –°–≤—è–∑—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
        )
        
        await callback.message.edit_text(faq_text)
    
    @router.callback_query(F.data == "faq_prizes")
    async def faq_prizes(callback: CallbackQuery):
        """FAQ: Prize information"""
        faq_text = (
            "üèÜ –ü—Ä–∏–∑—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n\n"
            "ü•á –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑: –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 50 000 ‚ÇΩ\n"
            "ü•à 5 –ø—Ä–∏–∑–æ–≤ –ø–æ 10 000 ‚ÇΩ\n"
            "ü•â 10 –ø—Ä–∏–∑–æ–≤ –ø–æ 5 000 ‚ÇΩ\n"
            "üéÅ 20 –ø—Ä–∏–∑–æ–≤ –ø–æ 1 000 ‚ÇΩ\n"
            "üí≥ 100 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ —Å–∫–∏–¥–∫—É 20%\n\n"
            "üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤:\n"
            "‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
            "‚Ä¢ –ü—Ä–∏ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 6 –º–µ—Å—è—Ü–µ–≤"
        )
        
        await callback.message.edit_text(faq_text)
    
    @router.callback_query(F.data == "faq_photo")
    async def faq_photo(callback: CallbackQuery):
        """FAQ: Photo problems"""
        faq_text = (
            "üì± –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ\n\n"
            "‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG, GIF\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë\n"
            "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ñ–ª–µ—Ç–∞\n"
            "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n\n"
            "‚ùå –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"
            "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
            "‚Ä¢ –†–∞–∑–º—ã—Ç–æ–µ –∏–ª–∏ —Ç–µ–º–Ω–æ–µ —Ñ–æ—Ç–æ\n\n"
            "üí° –°–æ–≤–µ—Ç—ã:\n"
            "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ª–∏—Ñ–ª–µ—Ç –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–≤–µ—Ç–µ\n"
            "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —Ä–æ–≤–Ω–æ\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Å—å –ª–∏—Ñ–ª–µ—Ç –≤ –∫–∞–¥—Ä–µ"
        )
        
        await callback.message.edit_text(faq_text)
    
    @router.callback_query(F.data == "faq_cards")
    async def faq_cards(callback: CallbackQuery):
        """FAQ: Loyalty cards"""
        faq_text = (
            "üí≥ –í–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ä—Ç–∞–º –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "üîç –ì–¥–µ –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã?\n"
            "‚Ä¢ –í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
            "‚Ä¢ –ù–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–µ\n"
            "‚Ä¢ –í SMS –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ\n\n"
            "üìù –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞:\n"
            "‚Ä¢ –û—Ç 8 –¥–æ 16 —Ü–∏—Ñ—Ä\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –±—É–∫–≤\n\n"
            "‚ùóÔ∏è –í–∞–∂–Ω–æ:\n"
            "‚Ä¢ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ = –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞\n"
            "‚Ä¢ –ö–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞"
        )
        
        await callback.message.edit_text(faq_text)
    
    @router.callback_query(F.data.in_(["create_ticket", "faq_other"]))
    async def start_ticket_creation(callback: CallbackQuery, state: FSMContext):
        """Start creating support ticket"""
        await state.set_state(SupportStates.WAITING_CATEGORY)
        
        await callback.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:"
        )
        
        await callback.message.answer(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º:",
            reply_markup=get_support_categories_keyboard()
        )
    
    @router.message(F.text == "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    async def create_ticket_message(message: Message, state: FSMContext):
        """Create ticket from message"""
        await state.set_state(SupportStates.WAITING_CATEGORY)
        
        await message.answer(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=get_support_categories_keyboard()
        )
    
    @router.callback_query(F.data.startswith("cat_"), StateFilter(SupportStates.WAITING_CATEGORY))
    async def select_category(callback: CallbackQuery, state: FSMContext):
        """Select support category"""
        category_map = {
            'cat_photo': '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ç–æ',
            'cat_card': '–í–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ä—Ç–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
            'cat_tech': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'cat_status': '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏',
            'cat_lottery': '–í–æ–ø—Ä–æ—Å—ã –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
            'cat_other': '–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞'
        }
        
        category = category_map.get(callback.data, '–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞')
        await state.update_data(category=category)
        await state.set_state(SupportStates.WAITING_DESCRIPTION)
        
        await callback.message.edit_text(
            f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:"
        )
        
        await callback.message.answer(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:",
            reply_markup=get_ticket_actions_keyboard()
        )
    
    @router.message(StateFilter(SupportStates.WAITING_DESCRIPTION))
    async def process_description(message: Message, state: FSMContext):
        """Process ticket description"""
        if message.text in ["üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", "üìÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"]:
            await state.set_state(SupportStates.WAITING_ATTACHMENT)
            await message.answer(
                "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å:\n"
                "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (JPG, PNG, GIF)\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n"
                "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–±–ª–µ–º—ã\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ' –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω—É–∂–µ–Ω."
            )
            return
        
        if message.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ":
            await self._create_ticket(message, state)
            return
        
        if message.text == "‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
            await state.set_state(SupportStates.WAITING_CATEGORY)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=get_support_categories_keyboard()
            )
            return
        
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.clear()
            await message.answer(
                "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Save description
        await state.update_data(description=message.text)
        
        data = await state.get_data()
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {message.text[:100]}{'...' if len(message.text) > 100 else ''}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?",
            reply_markup=get_ticket_actions_keyboard()
        )
    
    @router.message(F.photo, StateFilter(SupportStates.WAITING_ATTACHMENT))
    async def process_attachment_photo(message: Message, state: FSMContext):
        """Process photo attachment"""
        try:
            from utils.file_handler import save_photo
            
            # Save photo
            photo_path = await save_photo(message.bot, message.photo[-1].file_id, message.from_user.id)
            
            if photo_path:
                await state.update_data(attachment_path=photo_path)
                await message.answer(
                    "‚úÖ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é!\n\n"
                    "–ì–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?",
                    reply_markup=get_ticket_actions_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_ticket_actions_keyboard()
                )
        except Exception as e:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_ticket_actions_keyboard()
            )
    
    @router.message(F.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", StateFilter(SupportStates.WAITING_DESCRIPTION, SupportStates.WAITING_ATTACHMENT))
    async def create_ticket(message: Message, state: FSMContext):
        """Create support ticket"""
        await self._create_ticket(message, state)
    
    async def _create_ticket(self, message: Message, state: FSMContext):
        """Internal method to create ticket"""
        data = await state.get_data()
        
        if not data.get('description'):
            await message.answer(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
                reply_markup=get_ticket_actions_keyboard()
            )
            return
        
        try:
            # Get participant info
            participant = db_manager.get_participant_by_telegram_id(message.from_user.id)
            
            # Create ticket
            ticket_id = db_manager.create_support_ticket(
                user_id=message.from_user.id,
                username=message.from_user.username or "",
                subject=data.get('category', '–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
                participant_id=participant['id'] if participant else None
            )
            
            # Add initial message
            db_manager.add_support_message(
                ticket_id=ticket_id,
                sender_id=message.from_user.id,
                sender_type='user',
                message_text=data['description'],
                attachment_path=data.get('attachment_path')
            )
            
            # Get ticket number for user
            conn = db_manager.connect()
            ticket_info = conn.execute("""
                SELECT ticket_number FROM support_tickets WHERE id = ?
            """, [ticket_id]).fetchone()
            
            ticket_number = ticket_info[0] if ticket_info else "Unknown"
            
            await state.clear()
            
            await message.answer(
                f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"üé´ –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: {ticket_number}\n"
                f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
                f"‚è±Ô∏è –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n"
                f"üìß –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
                f"üí¨ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è'.",
                reply_markup=get_main_menu_keyboard()
            )
            
            # TODO: Notify admins about new ticket
            
        except Exception as e:
            logger.error(f"Error creating ticket: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
    
    @router.message(F.text == "üìû –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    async def my_tickets(message: Message):
        """Show user's tickets"""
        conn = db_manager.connect()
        
        tickets = conn.execute("""
            SELECT ticket_number, subject, status, created_at
            FROM support_tickets 
            WHERE user_id = ?
            ORDER BY created_at DESC
        """, [message.from_user.id]).fetchall()
        
        if not tickets:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'.",
                reply_markup=get_support_menu_keyboard()
            )
            return
        
        tickets_text = "üìû –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
        
        for ticket in tickets:
            status_emoji = {
                'open': 'üü°',
                'in_progress': 'üîµ',
                'closed': 'üü¢'
            }.get(ticket[2], '‚ö™')
            
            status_text = {
                'open': '–û—Ç–∫—Ä—ã—Ç–æ',
                'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
                'closed': '–ó–∞–∫—Ä—ã—Ç–æ'
            }.get(ticket[2], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            tickets_text += (
                f"{status_emoji} {ticket[0]}\n"
                f"üìù {ticket[1]}\n"
                f"üìÖ {ticket[3]}\n"
                f"Status: {status_text}\n\n"
            )
        
        await message.answer(
            tickets_text,
            reply_markup=get_support_menu_keyboard()
        )
    
    return router