"""
Main handlers for the Telegram bot
"""

import re
import os
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
from pathlib import Path

from models import RegistrationStates
from keyboards import *
from utils.validators import validate_phone, validate_loyalty_card, validate_name
from utils.file_handler import save_photo
from database import DatabaseManager

logger = logging.getLogger(__name__)

def create_registration_router(db_manager: DatabaseManager) -> Router:
    """Create and configure registration router"""
    router = Router()
    
    @router.message(Command("start"))
    async def start_handler(message: Message, state: FSMContext):
        """Handle /start command"""
        await state.clear()
        
        # Check if user is already registered
        participant = db_manager.get_participant_by_telegram_id(message.from_user.id)
        
        if participant:
            status_text = {
                'pending': '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
                'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞',
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            }.get(participant['status'], participant['status'])
            
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {participant['full_name']}!\n\n"
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞: {status_text}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {participant['registration_date']}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤!\n\n"
                "üèÜ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "1Ô∏è‚É£ –£–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –∏–º—è\n"
                "2Ô∏è‚É£ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "3Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
                "4Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
    
    @router.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    async def start_registration(message: Message, state: FSMContext):
        """Start registration process"""
        # Check if already registered
        participant = db_manager.get_participant_by_telegram_id(message.from_user.id)
        
        if participant:
            await message.answer(
                "‚ùóÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å'",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        await state.set_state(RegistrationStates.WAITING_NAME)
        await message.answer(
            "üìù –®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞.",
            reply_markup=get_name_input_keyboard()
        )
    
    @router.message(StateFilter(RegistrationStates.WAITING_NAME))
    async def process_name(message: Message, state: FSMContext):
        """Process name input"""
        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await state.clear()
            await message.answer(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        if not validate_name(message.text):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è!\n\n"
                "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
                reply_markup=get_name_input_keyboard()
            )
            return
        
        await state.update_data(full_name=message.text.strip())
        await state.set_state(RegistrationStates.WAITING_PHONE)
        
        await message.answer(
            "üìû –®–∞–≥ 2 –∏–∑ 4: –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
            reply_markup=get_phone_input_keyboard()
        )
    
    @router.message(F.contact, StateFilter(RegistrationStates.WAITING_PHONE))
    async def process_contact(message: Message, state: FSMContext):
        """Process contact sharing"""
        phone = message.contact.phone_number
        
        if not phone.startswith('+'):
            phone = '+' + phone
        
        # Validate phone
        if not validate_phone(phone):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
                "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º (+7XXXXXXXXXX).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_phone_input_keyboard()
            )
            return
        
        # Check if phone already exists
        if db_manager.check_phone_exists(phone):
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!\n\n"
                "–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å'",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()
            return
        
        await state.update_data(phone_number=phone)
        await state.set_state(RegistrationStates.WAITING_LOYALTY_CARD)
        
        await message.answer(
            "üí≥ –®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (8-16 —Ü–∏—Ñ—Ä).\n"
            "–ö–∞—Ä—Ç—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–µ.",
            reply_markup=get_loyalty_card_keyboard()
        )
    
    @router.message(F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", StateFilter(RegistrationStates.WAITING_PHONE))
    async def manual_phone_input(message: Message):
        """Switch to manual phone input"""
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é\n\n"
            "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789)",
            reply_markup=get_loyalty_card_keyboard()
        )
    
    @router.message(StateFilter(RegistrationStates.WAITING_PHONE))
    async def process_phone_text(message: Message, state: FSMContext):
        """Process phone number text input"""
        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏":
            await state.set_state(RegistrationStates.WAITING_NAME)
            await message.answer(
                "üìù –®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è",
                reply_markup=get_name_input_keyboard()
            )
            return
        
        phone = message.text.strip()
        
        # Add + if missing
        if not phone.startswith('+') and phone.startswith('7'):
            phone = '+' + phone
        elif not phone.startswith('+') and phone.startswith('8'):
            phone = '+7' + phone[1:]
        
        if not validate_phone(phone):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX\n"
                "–ü—Ä–∏–º–µ—Ä: +79123456789\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_phone_input_keyboard()
            )
            return
        
        # Check if phone exists
        if db_manager.check_phone_exists(phone):
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!\n\n"
                "–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()
            return
        
        await state.update_data(phone_number=phone)
        await state.set_state(RegistrationStates.WAITING_LOYALTY_CARD)
        
        await message.answer(
            "üí≥ –®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (8-16 —Ü–∏—Ñ—Ä).",
            reply_markup=get_loyalty_card_keyboard()
        )
    
    @router.message(StateFilter(RegistrationStates.WAITING_LOYALTY_CARD))
    async def process_loyalty_card(message: Message, state: FSMContext):
        """Process loyalty card input"""
        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
            await state.set_state(RegistrationStates.WAITING_PHONE)
            await message.answer(
                "üìû –®–∞–≥ 2 –∏–∑ 4: –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                reply_markup=get_phone_input_keyboard()
            )
            return
        
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.clear()
            await message.answer(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        loyalty_card = message.text.strip()
        
        if not validate_loyalty_card(loyalty_card):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!\n\n"
                "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 8 –¥–æ 16 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä: 12345678\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_loyalty_card_keyboard()
            )
            return
        
        # Check if card exists
        if db_manager.check_loyalty_card_exists(loyalty_card):
            await message.answer(
                "‚ùå –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!\n\n"
                "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()
            return
        
        await state.update_data(loyalty_card=loyalty_card)
        await state.set_state(RegistrationStates.WAITING_LEAFLET_PHOTO)
        
        await message.answer(
            "üì∑ –®–∞–≥ 4 –∏–∑ 4: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n\n"
            "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ª–∏—Ñ–ª–µ—Ç–∞.\n\n"
            "‚ùì –õ–∏—Ñ–ª–µ—Ç - —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–∞—è –ª–∏—Å—Ç–æ–≤–∫–∞ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö.",
            reply_markup=get_photo_upload_keyboard()
        )
    
    @router.message(F.text == "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏—Ñ–ª–µ—Ç?", StateFilter(RegistrationStates.WAITING_LEAFLET_PHOTO))
    async def explain_leaflet(message: Message):
        """Explain what leaflet is"""
        await message.answer(
            "üìÑ –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏—Ñ–ª–µ—Ç?\n\n"
            "–õ–∏—Ñ–ª–µ—Ç - —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–∞—è –ª–∏—Å—Ç–æ–≤–∫–∞ –∏–ª–∏ –±—Ä–æ—à—é—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:\n"
            "‚Ä¢ –¢–æ–≤–∞—Ä–∞—Ö –∏ –∏—Ö —Ü–µ–Ω–∞—Ö\n"
            "‚Ä¢ –°–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö\n"
            "‚Ä¢ –ù–æ–≤–∏–Ω–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
            "–û–±—ã—á–Ω–æ –ª–∏—Ñ–ª–µ—Ç—ã —Ä–∞–∑–¥–∞—é—Ç:\n"
            "‚Ä¢ –ù–∞ –≤—Ö–æ–¥–µ –≤ –º–∞–≥–∞–∑–∏–Ω\n"
            "‚Ä¢ –í –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏\n"
            "‚Ä¢ –ù–∞ —Å—Ç–æ–π–∫–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª—é–±–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ª–∏—Ñ–ª–µ—Ç–∞.",
            reply_markup=get_photo_upload_keyboard()
        )
    
    @router.message(F.photo, StateFilter(RegistrationStates.WAITING_LEAFLET_PHOTO))
    async def process_photo(message: Message, state: FSMContext):
        """Process leaflet photo"""
        try:
            # Get the largest photo
            photo = message.photo[-1]
            
            # Download and save photo
            photo_path = await save_photo(message.bot, photo.file_id, message.from_user.id)
            
            if not photo_path:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ!\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=get_photo_upload_keyboard()
                )
                return
            
            await state.update_data(leaflet_photo_path=photo_path)
            await state.set_state(RegistrationStates.CONFIRMATION)
            
            # Show confirmation
            data = await state.get_data()
            
            confirmation_text = (
                "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                f"üë§ –ò–º—è: {data['full_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
                f"üí≥ –ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {data['loyalty_card']}\n"
                f"üì∑ –§–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n\n"
                "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?"
            )
            
            await message.answer(
                confirmation_text,
                reply_markup=get_confirmation_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_photo_upload_keyboard()
            )
    
    @router.message(StateFilter(RegistrationStates.WAITING_LEAFLET_PHOTO))
    async def handle_photo_text(message: Message, state: FSMContext):
        """Handle text messages in photo waiting state"""
        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏":
            await state.set_state(RegistrationStates.WAITING_LOYALTY_CARD)
            await message.answer(
                "üí≥ –®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                reply_markup=get_loyalty_card_keyboard()
            )
            return
        
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.clear()
            await message.answer(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        await message.answer(
            "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–º–µ—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏.",
            reply_markup=get_photo_upload_keyboard()
        )
    
    # Confirmation callbacks
    @router.callback_query(F.data == "confirm_registration", StateFilter(RegistrationStates.CONFIRMATION))
    async def confirm_registration(callback: CallbackQuery, state: FSMContext):
        """Confirm and save registration"""
        data = await state.get_data()
        
        try:
            participant_id = db_manager.add_participant(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username or "",
                full_name=data['full_name'],
                phone_number=data['phone_number'],
                loyalty_card=data['loyalty_card'],
                leaflet_photo_path=data['leaflet_photo_path']
            )
            
            await state.clear()
            
            await callback.message.edit_text(
                "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
                "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
                "üïê –û–±—ã—á–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.\n\n"
                "–£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ"
            )
            
            await callback.message.answer(
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.info(f"User {callback.from_user.id} registered successfully")
            
        except Exception as e:
            logger.error(f"Registration error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # Edit callbacks
    @router.callback_query(F.data == "edit_name", StateFilter(RegistrationStates.CONFIRMATION))
    async def edit_name(callback: CallbackQuery, state: FSMContext):
        """Edit name"""
        await state.set_state(RegistrationStates.WAITING_NAME)
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
            reply_markup=None
        )
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
            reply_markup=get_name_input_keyboard()
        )
    
    @router.callback_query(F.data == "cancel_registration", StateFilter(RegistrationStates.CONFIRMATION))
    async def cancel_registration(callback: CallbackQuery, state: FSMContext):
        """Cancel registration"""
        await state.clear()
        await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    return router