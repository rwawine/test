"""
Notification system for participant status updates
"""

import asyncio
import logging
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from typing import Optional

logger = logging.getLogger(__name__)

class NotificationSystem:
    """System for sending notifications to participants"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def send_approval_notification(self, telegram_id: int, participant_name: str, admin_notes: str = None) -> bool:
        """
        Send approval notification to participant
        
        Args:
            telegram_id: Participant's Telegram ID
            participant_name: Participant's full name
            admin_notes: Optional admin notes
            
        Returns:
            bool: True if sent successfully, False otherwise
        """
        try:
            message = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {participant_name}!\n\n"
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤.\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
            )
            
            if admin_notes:
                message += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{admin_notes}\n\n"
            
            message += "–£–¥–∞—á–∏! üçÄ"
            
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            
            logger.info(f"Approval notification sent to {telegram_id}")
            return True
            
        except TelegramForbiddenError:
            logger.warning(f"User {telegram_id} blocked the bot")
            return False
        except TelegramBadRequest as e:
            logger.warning(f"Bad request for user {telegram_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"Failed to send approval notification to {telegram_id}: {e}")
            return False
    
    async def send_rejection_notification(self, telegram_id: int, participant_name: str, reason: str = None) -> bool:
        """
        Send rejection notification to participant
        
        Args:
            telegram_id: Participant's Telegram ID
            participant_name: Participant's full name
            reason: Reason for rejection
            
        Returns:
            bool: True if sent successfully, False otherwise
        """
        try:
            message = (
                f"‚ùå {participant_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            )
            
            if reason:
                message += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{reason}\n\n"
            else:
                message += (
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "‚Ä¢ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n"
                    "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —É—á–∞—Å—Ç–∏—è\n\n"
                )
            
            message += (
                "üÜò –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø—Ä–∞–≤–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è."
            )
            
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            
            logger.info(f"Rejection notification sent to {telegram_id}")
            return True
            
        except TelegramForbiddenError:
            logger.warning(f"User {telegram_id} blocked the bot")
            return False
        except TelegramBadRequest as e:
            logger.warning(f"Bad request for user {telegram_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"Failed to send rejection notification to {telegram_id}: {e}")
            return False
    
    async def send_status_change_notification(self, telegram_id: int, participant_name: str, 
                                            new_status: str, admin_notes: str = None) -> bool:
        """
        Send general status change notification
        
        Args:
            telegram_id: Participant's Telegram ID
            participant_name: Participant's full name
            new_status: New status (approved/rejected/pending)
            admin_notes: Optional admin notes
            
        Returns:
            bool: True if sent successfully, False otherwise
        """
        if new_status == 'approved':
            return await self.send_approval_notification(telegram_id, participant_name, admin_notes)
        elif new_status == 'rejected':
            return await self.send_rejection_notification(telegram_id, participant_name, admin_notes)
        else:
            # For pending or other statuses, send a generic notification
            try:
                status_text = {
                    'pending': '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
                }.get(new_status, new_status)
                
                message = (
                    f"üìã {participant_name}, —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω.\n\n"
                    f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}\n\n"
                )
                
                if admin_notes:
                    message += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{admin_notes}\n\n"
                
                message += "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
                
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text=message
                )
                
                logger.info(f"Status change notification sent to {telegram_id}")
                return True
                
            except Exception as e:
                logger.error(f"Failed to send status change notification to {telegram_id}: {e}")
                return False
    
    async def send_support_response_notification(self, telegram_id: int, participant_name: str, 
                                               ticket_number: str, response_text: str) -> bool:
        """
        Send support response notification to participant
        
        Args:
            telegram_id: Participant's Telegram ID
            participant_name: Participant's full name
            ticket_number: Support ticket number
            response_text: Admin's response text
            
        Returns:
            bool: True if sent successfully, False otherwise
        """
        try:
            message = (
                f"üí¨ {participant_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
                f"üé´ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_number}\n\n"
                f"üìù –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{response_text}\n\n"
                f"üîÑ –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'."
            )
            
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            
            logger.info(f"Support response notification sent to {telegram_id} for ticket {ticket_number}")
            return True
            
        except TelegramForbiddenError:
            logger.warning(f"User {telegram_id} blocked the bot")
            return False
        except TelegramBadRequest as e:
            logger.warning(f"Bad request for user {telegram_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"Failed to send support response notification to {telegram_id}: {e}")
            return False